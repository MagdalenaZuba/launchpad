---

layout:
    title: "eZ Launchpad - Project Page and Documentation"

header:
    toggle.navigation: "Basculer la navigation"

    menu:
        installation: "Installation"
        usage: "Usage"
        deploy: "Déploiement"
        stack: "Stack"
        commands: "Commandes"
        more: "Plus"
        d4m: "Mac OS X optimisations - D4M"
        mac-tips: "Mac OS X - Astuces"
        global.configuration: "Configurations globales"

footer:
    company.overview: "Présentation de l'entreprise"
    company.products: "Produits"
    ez.doc: "Documentation"
    followus: "Suivez nous sur les réseaux sociaux"
    copyright: "Copyright © 1999-2017 eZ Systems AS. Tous droits réservés."
    poweredby: "Propulsé par"

content:
    intro:
        blurb: "Un outils qui va vous aider à construire un projet %ez% avec %docker% en moins de 5 minutes."
        well: >
            Vous aurez une <strong>stack Docker complète</strong> avec le code source sur l'hôte <strong>prêt
            à développer</strong> directement !

    demo:
        title: "Demonstration"
        blurb: >
            Voici une démonstration de l'utilisation de l'<a href="#initstack">initialization</a> d'un projet en
            ne partant de rien. Cela va installer tout la stack pour vous, et vous permettre de code, commit et pusher!
        create.blurb: >
            Voici une démonstration de l'utilisation de la<a href="#createstack">creation</a> d'un projet en
            partant d'un dépot git. Cela va installer tout la stack pour vous, et vous permettre de code, commit et pusher!
    install:
        title: "Installation"
        toolinstalled: "Si vous avez <strong>%tool%</strong> d'installé:"

    usage:
        title: "Utilisation"
        blurb: "Quand vous avez installé eZ Launchpad (<em>~/ez</em>), vous pouvez profiter des fonctionnalités."
        2mainfeatures: "eZ Launchpad fourni 2 fonctionnalités principales:"
        init: "<strong>Initialisation</strong> d'un tout nouveau projet sur Docker"
        create: "<strong>Creation</strong> de la stack Docker d'un projet existant."
        fromscratch: "Démarrer de rien"
        bootstrap: "Démarrer d'un projet existant"
        init.title: "Init<small>ialisation</small>"
        init.blurb: >
                C'est l'installation en partant de zéro.
                Vous devez utiliser cela quand vous n'avez pas encore de projet, que vous voulez installer eZ Platform.
        init.willaskquestion: "eZ Launchpad va vous accompagner dans la création avec quelques questions."
        init.macosxwarning: "Les utilisateurs de Mac OS X auront des questions spéciales pour installer <a href='#mac-tips' class='alert-link'>NFS</a>."
        init.end.steps: "A la fin de la procédure, cette étape auront été fait pour vous:"
        init.end.steps.1: "Configuration locale du projet."
        init.end.steps.2: "Téléchargement(pull) des bonnes images Docker sur votre local démon Docker."
        init.end.steps.3: "Installer un <em>docker-compose.yml</em> adapté pour eZ."
        init.end.steps.4: "Créer et démarrer les containers requis.(En fonction des choix effectués)"
        init.end.steps.5: "Installation de Composer dans le container Engine.(la où PHP est éxécuté sur la stack)"
        init.end.steps.6: "Installation d'eZ Platform avec Composer dans la stack."

        init.end.finished.ps: "Une fois l'initialisation terminée, le projet est prêt, vous pouvez vérifier en faisant:"
        init.end.finished.dump: "Vous êtes désormais prêt a exporter la base de données et le storage, commiter and publier votre projet vers votre équipe."
        init.end.finished.entreprise: >
                Si vous voulez utiliser la version entreprise ou une version non stable vous avez le choix! Regardez l'aide.
                Voici un exemple:
        init.end.finished.httpbasics: >
                Quand eZ Launchpad vous demander les autorisations HTTP-BASIC alors il vous faudra fournir
                <a href="https://doc.ez.no/display/TECHDOC/Using+Composer" target="_blank">la clef d'installation et le jeton</a>.

        create.title: "Creation"
        create.blurb: "Dans ce context vous avez déjà un projet quelque part, quelqu'un a déjà fait un <em>~/ez init</em>"
        create.gitpull: "Donc vous avez probablement déjà fait"
        create.projectready: >
                Si vous voulez savoir si votre projet est prêt pour eZ Launchpad vous pouvez vérifier l'existence de
                <em>.ezlaunchpad.yml</em> à la racine du projet.
        create.localstack: "Pour créeer la stack locale la commande est alors"
        create.whathasbeendone: "eZ Launchpad va juste télécharger les images, créer les containers puis importer la base et le storage."

        blackfire.note: >
                Si vous utilisez <a href="https://blackfire.io">Blackfire.io</a>, alors n'oubliez pas d'exporter vos variables
                d'authentification avant d'éxécuter les commandes suivantes.

    deploy:
        title: "Déploiement"
        blurb: >
            eZ Launchpad peut également vous aider à deployer. Même si c'est optionnel et que vous pouvez déployer
            comme bon vous semble, nous voulions vous simplifier la tâche.
        platformsh: "Platform.sh"
        platformsh.blurb: >
            <a href="https://platform.sh/product">Platform.sh</a> est une PaaS (<strong>P</strong>latform <strong>a</strong>s <strong>a</strong> <strong>S</strong>ervice)<br />
            Avec Platform.sh il n'y a pas vraiment de processus de déploiement manuel. Platform.sh va simplement créer et synchroniser les environments selon le repository git!
        platformsh.blurb2: >
            eZ Launchpad va vous permettre de configurer le projet pour fonctionner avec Platform.sh.
        platformsh.setup.subtitle: "Configuration"
        platformsh.setup.blurb: >
            Cette commande va créer et générer les fichiers requis par Platform.sh. Comme eZ Launchpad connait votre projet et vos services
            il va adapter les fichiers de configuration Platform.sh
        platformsh.setup.listfile: "Voici la liste des fichier qui vont être créés."
        platformsh.setup.dump: "Vous aurez besoin d'initialiser la base de données et le storage sur Platform.sh (la première fois), eZ Launchpad va donc aussi créer un dump."
        platformsh.deploy.subtitle: "Deploiement"
        platformsh.deploy.blurb: >
            Comment déjà mentionné, il n'y a pas vraiment de processus de déploiement, cette command va juste afficher de la documentation.

        aws: "AWS"

    stack:
        title: "Stack"
        blurb: "N'importe quand vous pouvez avoir de l'information sur votre stack"
        moreorlessservice: "Selon l'initialisation éffectuée vous aurez plus ou moins de service disponible. Voici par défaut."

    commands:
        title: "Commandes"
        blurb: "eZ Launchpad est fait pour vous aider avec Docker."
        list: "Pour le faire, vouci les commandes disponibles:"
        extra: "Lorsque vous voulez passer des arguments à une commande Symfony, vous devez tout mettre entre guillemets (commande + arguments):"

    configuration:
        title: "Configurations globales"
        blurb: >
            Parce que vous voulez pouvoir partager certaines configurations entre vos projets.
            eZ Launchpad lit un fichier de configuration dans votre HOME.
        fileexample: >
            Ce fichier de configuration est <em>~/ezlaunchpad/ez.yml</em>. Voici un exemple:
        fileexample.description: >
            Notez que la configuarion est globale et ne sera pas incluse dans le projet. (i.e dans le repository de source).
            Mais elle sera utilisé dans votre stack Docker locale.
        fileexample.description.dockersectionisnext: "La section <em>docker</em> est décrite dans la prochaine section."

    mac-tips:
        title: Mac OS X - Tips
        nfs_explanation.blurb: >
            Pour partager des répertoires entre l'hôte(votre Mac) vers les containers
            <em>Docker for Mac</em> est très lent.(au moins pour le moment).
            Donc pour contourner ce problème de performance, <strong>il y a une technique</strong>.
            NFS! C'est étrange en effet, mais oui NFS est bien plus rapide que le montage par défaut!
            Avant la dernière version de Docker pour Mac, nous utilisions <a href="https://github.com/IFSight/d4m-nfs">D4M</a>
            mais depuis la version 18.03 nous pouvons directement monter le host via un volume depuis le container.
        nfs_explanation.update.title: "Migrer depuis D4M-NFS"
        nfs_explanation.update.1: >
            D'abord vous devez ajouter une option a votre <strong>/ect/exports</strong>, le <strong>-alldirs</strong>
        nfs_explanation.update.2: >
            Ensuite vous devez mettre à jour la version de <em>docker-compose</em> dans votre fichier
            <strong>provisioning/dev/docker-compose.yml</strong> vers <strong>2.1</strong>. Ensuite vous devez créer
            un novueau fichier <strong>provisioning/dev/docker-compose-osx.yml</strong>. Avec ce contenu:

        nfs_explanation.update.3: >
            Une fois que c'est configuré, vous pouvez <strong>dumpdata</strong> (pour backuper), clean et re-create le projet:

        nfs_explanation.update.4: >
            Si vous aviez un mapping special, corrigé le:

        nfs_explanation.update.5: >
            C'est tout

        containercache.title: "Le cache dans le container"
        containercache.blurb: >
            Même avec D4M et le partage NFS les performances peuvent être améliorées. Ce qui suit est clairement une
            astuce mais une astuce qui fonctionne parfaitement bien!<br />
            Voici la technique dans votre env vous avez une ligne:

        containercache.explanation: >
            Si vous voulez que le cache soit généré sur votre host, pour PHPStorm par exemple, supprimer cette ligne:

other:
    copy: "Copier"
    soon: "Bientôt disponible..."
